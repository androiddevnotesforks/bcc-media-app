import 'package:freezed_annotation/freezed_annotation.dart';

part 'feature_flags.freezed.dart';
part 'feature_flags.g.dart';

@freezed
sealed class FeatureFlags with _$FeatureFlags {
  const FeatureFlags._();

  const factory FeatureFlags({
    @Default([]) List<String> variants,
    @Default(false) bool auth,
    @Default(false) bool publicSignup,
    @Default(false) bool socialSignup,
    @Default(false) bool autoplayNext,
    @Default(false) bool shareVideoButton,
    @Default(false) bool flutterPlayerControls,
    @Default(false) bool playNextButton,
    @Default(true) bool chapters,
    @Default(false) bool chaptersFirstTab,
    @Default(false) bool download,
    @Default(false) bool shorts,
    @Default(false) bool shortsSourceButtonPrimary,
    @Default(false) bool shortsSharing,
    @Default(false) bool shortsHideAutoGenerated,
    @Default(false) bool shortsHideBeta,
    @Default(false) bool shortsGuide,
    @Default(false) bool disableNpawShorts,
    String? featuredSectionVariant,
    String? iconSectionVariant,
    @Default(false) bool skipToChapter,
    @Default(false) bool startupDelay,
    String? delayTimeInMs,
    @Default(false) bool bccmAudioTest,
    @Default(false) bool kidsAutoplayNext,
  }) = _FeatureFlags;

  factory FeatureFlags.fromJson(Map<String, dynamic> json) => _$FeatureFlagsFromJson(json);

  /// If the value is true in the original, then the value is always true
  ///
  /// Basically just a bunch of || operators
  FeatureFlags mergeWithTrueAlwaysWins(FeatureFlags newFlags) {
    return FeatureFlags(
      variants: newFlags.variants,
      auth: newFlags.auth || auth,
      publicSignup: newFlags.publicSignup || publicSignup,
      socialSignup: newFlags.socialSignup || socialSignup,
      autoplayNext: newFlags.autoplayNext || autoplayNext,
      shareVideoButton: newFlags.shareVideoButton || shareVideoButton,
      flutterPlayerControls: newFlags.flutterPlayerControls || flutterPlayerControls,
      playNextButton: newFlags.playNextButton || playNextButton,
      chapters: newFlags.chapters || chapters,
      chaptersFirstTab: newFlags.chaptersFirstTab || chaptersFirstTab,
      download: newFlags.download || download,
      shorts: newFlags.shorts || shorts,
      shortsSourceButtonPrimary: newFlags.shortsSourceButtonPrimary || shortsSourceButtonPrimary,
      shortsSharing: newFlags.shortsSharing || shortsSharing,
      shortsHideAutoGenerated: newFlags.shortsHideAutoGenerated || shortsHideAutoGenerated,
      shortsHideBeta: newFlags.shortsHideBeta || shortsHideBeta,
      shortsGuide: newFlags.shortsGuide || shortsGuide,
      disableNpawShorts: newFlags.disableNpawShorts || disableNpawShorts,
      featuredSectionVariant: newFlags.featuredSectionVariant ?? featuredSectionVariant,
      iconSectionVariant: newFlags.iconSectionVariant ?? iconSectionVariant,
      skipToChapter: newFlags.skipToChapter || skipToChapter,
      startupDelay: newFlags.startupDelay || startupDelay,
      delayTimeInMs: newFlags.delayTimeInMs ?? delayTimeInMs,
      bccmAudioTest: newFlags.bccmAudioTest || bccmAudioTest,
      kidsAutoplayNext: newFlags.kidsAutoplayNext || kidsAutoplayNext,
    );
  }
}
