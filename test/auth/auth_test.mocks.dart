// Mocks generated by Mockito 5.4.2 from annotations
// in brunstadtv_app/test/auth/auth_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:brunstadtv_app/api/auth0_api.dart' as _i5;
import 'package:brunstadtv_app/models/auth0/auth0_api.dart' as _i11;
import 'package:brunstadtv_app/models/offline/download_quality.dart' as _i9;
import 'package:brunstadtv_app/providers/settings.dart' as _i4;
import 'package:flutter_appauth/src/flutter_appauth.dart' as _i6;
import 'package:flutter_appauth_platform_interface/flutter_appauth_platform_interface.dart'
    as _i8;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIOSOptions_0 extends _i1.SmartFake implements _i2.IOSOptions {
  _FakeIOSOptions_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidOptions_1 extends _i1.SmartFake
    implements _i2.AndroidOptions {
  _FakeAndroidOptions_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxOptions_2 extends _i1.SmartFake implements _i2.LinuxOptions {
  _FakeLinuxOptions_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsOptions_3 extends _i1.SmartFake
    implements _i2.WindowsOptions {
  _FakeWindowsOptions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebOptions_4 extends _i1.SmartFake implements _i2.WebOptions {
  _FakeWebOptions_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsOptions_5 extends _i1.SmartFake implements _i2.MacOsOptions {
  _FakeMacOsOptions_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRef_6<State extends Object?> extends _i1.SmartFake
    implements _i3.Ref<State> {
  _FakeRef_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettings_7 extends _i1.SmartFake implements _i4.Settings {
  _FakeSettings_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceTokenRequestResponse_8 extends _i1.SmartFake
    implements _i5.DeviceTokenRequestResponse {
  _FakeDeviceTokenRequestResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCredentials_9 extends _i1.SmartFake implements _i5.Credentials {
  _FakeCredentials_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FlutterAppAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterAppAuth extends _i1.Mock implements _i6.FlutterAppAuth {
  @override
  _i7.Future<_i8.AuthorizationTokenResponse?> authorizeAndExchangeCode(
          _i8.AuthorizationTokenRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #authorizeAndExchangeCode,
          [request],
        ),
        returnValue: _i7.Future<_i8.AuthorizationTokenResponse?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i8.AuthorizationTokenResponse?>.value(),
      ) as _i7.Future<_i8.AuthorizationTokenResponse?>);
  @override
  _i7.Future<_i8.AuthorizationResponse?> authorize(
          _i8.AuthorizationRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #authorize,
          [request],
        ),
        returnValue: _i7.Future<_i8.AuthorizationResponse?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i8.AuthorizationResponse?>.value(),
      ) as _i7.Future<_i8.AuthorizationResponse?>);
  @override
  _i7.Future<_i8.TokenResponse?> token(_i8.TokenRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #token,
          [request],
        ),
        returnValue: _i7.Future<_i8.TokenResponse?>.value(),
        returnValueForMissingStub: _i7.Future<_i8.TokenResponse?>.value(),
      ) as _i7.Future<_i8.TokenResponse?>);
  @override
  _i7.Future<_i8.EndSessionResponse?> endSession(
          _i8.EndSessionRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #endSession,
          [request],
        ),
        returnValue: _i7.Future<_i8.EndSessionResponse?>.value(),
        returnValueForMissingStub: _i7.Future<_i8.EndSessionResponse?>.value(),
      ) as _i7.Future<_i8.EndSessionResponse?>);
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i2.FlutterSecureStorage {
  @override
  _i2.IOSOptions get iOptions => (super.noSuchMethod(
        Invocation.getter(#iOptions),
        returnValue: _FakeIOSOptions_0(
          this,
          Invocation.getter(#iOptions),
        ),
        returnValueForMissingStub: _FakeIOSOptions_0(
          this,
          Invocation.getter(#iOptions),
        ),
      ) as _i2.IOSOptions);
  @override
  _i2.AndroidOptions get aOptions => (super.noSuchMethod(
        Invocation.getter(#aOptions),
        returnValue: _FakeAndroidOptions_1(
          this,
          Invocation.getter(#aOptions),
        ),
        returnValueForMissingStub: _FakeAndroidOptions_1(
          this,
          Invocation.getter(#aOptions),
        ),
      ) as _i2.AndroidOptions);
  @override
  _i2.LinuxOptions get lOptions => (super.noSuchMethod(
        Invocation.getter(#lOptions),
        returnValue: _FakeLinuxOptions_2(
          this,
          Invocation.getter(#lOptions),
        ),
        returnValueForMissingStub: _FakeLinuxOptions_2(
          this,
          Invocation.getter(#lOptions),
        ),
      ) as _i2.LinuxOptions);
  @override
  _i2.WindowsOptions get wOptions => (super.noSuchMethod(
        Invocation.getter(#wOptions),
        returnValue: _FakeWindowsOptions_3(
          this,
          Invocation.getter(#wOptions),
        ),
        returnValueForMissingStub: _FakeWindowsOptions_3(
          this,
          Invocation.getter(#wOptions),
        ),
      ) as _i2.WindowsOptions);
  @override
  _i2.WebOptions get webOptions => (super.noSuchMethod(
        Invocation.getter(#webOptions),
        returnValue: _FakeWebOptions_4(
          this,
          Invocation.getter(#webOptions),
        ),
        returnValueForMissingStub: _FakeWebOptions_4(
          this,
          Invocation.getter(#webOptions),
        ),
      ) as _i2.WebOptions);
  @override
  _i2.MacOsOptions get mOptions => (super.noSuchMethod(
        Invocation.getter(#mOptions),
        returnValue: _FakeMacOsOptions_5(
          this,
          Invocation.getter(#mOptions),
        ),
        returnValueForMissingStub: _FakeMacOsOptions_5(
          this,
          Invocation.getter(#mOptions),
        ),
      ) as _i2.MacOsOptions);
  @override
  _i7.Future<void> write({
    required String? key,
    required String? value,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<String?> read({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<String?>.value(),
        returnValueForMissingStub: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);
  @override
  _i7.Future<bool> containsKey({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<void> delete({
    required String? key,
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<Map<String, String>> readAll({
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<Map<String, String>>.value(<String, String>{}),
        returnValueForMissingStub:
            _i7.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i7.Future<Map<String, String>>);
  @override
  _i7.Future<void> deleteAll({
    _i2.IOSOptions? iOptions,
    _i2.AndroidOptions? aOptions,
    _i2.LinuxOptions? lOptions,
    _i2.WebOptions? webOptions,
    _i2.MacOsOptions? mOptions,
    _i2.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i4.SettingsService {
  @override
  _i3.Ref<Object?> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeRef_6<Object?>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _FakeRef_6<Object?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i3.Ref<Object?>);
  @override
  set onError(_i3.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i7.Stream<_i4.Settings> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i4.Settings>.empty(),
        returnValueForMissingStub: _i7.Stream<_i4.Settings>.empty(),
      ) as _i7.Stream<_i4.Settings>);
  @override
  _i4.Settings get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeSettings_7(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeSettings_7(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.Settings);
  @override
  set state(_i4.Settings? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.Settings get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeSettings_7(
          this,
          Invocation.getter(#debugState),
        ),
        returnValueForMissingStub: _FakeSettings_7(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i4.Settings);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i7.Future<void> setAppLanguage(String? code) => (super.noSuchMethod(
        Invocation.method(
          #setAppLanguage,
          [code],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> setAudioLanguages(List<String>? languageCodes) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAudioLanguages,
          [languageCodes],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  void refreshSessionId() => super.noSuchMethod(
        Invocation.method(
          #refreshSessionId,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<void> setSubtitleLanguage(String? code) => (super.noSuchMethod(
        Invocation.method(
          #setSubtitleLanguage,
          [code],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> setAnalyticsId(String? analyticsId) => (super.noSuchMethod(
        Invocation.method(
          #setAnalyticsId,
          [analyticsId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> setBetaTester(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setBetaTester,
          [value],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> setUseNativePlayer(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #setUseNativePlayer,
          [value],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> updateExtraUsergroups(List<String>? value) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateExtraUsergroups,
          [value],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> setDownloadAudioLanguage(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDownloadAudioLanguage,
          [code],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> setDownloadQuality(_i9.DownloadQuality? quality) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDownloadQuality,
          [quality],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  bool updateShouldNotify(
    _i4.Settings? old,
    _i4.Settings? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i3.RemoveListener addListener(
    _i10.Listener<_i4.Settings>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i3.RemoveListener);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Auth0Api].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuth0Api extends _i1.Mock implements _i5.Auth0Api {
  @override
  String get domain => (super.noSuchMethod(
        Invocation.getter(#domain),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get clientId => (super.noSuchMethod(
        Invocation.getter(#clientId),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get audience => (super.noSuchMethod(
        Invocation.getter(#audience),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i7.Future<_i11.Auth0SignupResponse?> signup(
          _i11.Auth0SignupRequestBody? requestBody) =>
      (super.noSuchMethod(
        Invocation.method(
          #signup,
          [requestBody],
        ),
        returnValue: _i7.Future<_i11.Auth0SignupResponse?>.value(),
        returnValueForMissingStub:
            _i7.Future<_i11.Auth0SignupResponse?>.value(),
      ) as _i7.Future<_i11.Auth0SignupResponse?>);
  @override
  _i7.Future<_i5.DeviceTokenRequestResponse> fetchDeviceCode(
          {required String? scope}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDeviceCode,
          [],
          {#scope: scope},
        ),
        returnValue: _i7.Future<_i5.DeviceTokenRequestResponse>.value(
            _FakeDeviceTokenRequestResponse_8(
          this,
          Invocation.method(
            #fetchDeviceCode,
            [],
            {#scope: scope},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.DeviceTokenRequestResponse>.value(
                _FakeDeviceTokenRequestResponse_8(
          this,
          Invocation.method(
            #fetchDeviceCode,
            [],
            {#scope: scope},
          ),
        )),
      ) as _i7.Future<_i5.DeviceTokenRequestResponse>);
  @override
  _i7.Future<_i5.Credentials> listenToResolve(
          _i5.DeviceTokenRequestResponse? deviceToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #listenToResolve,
          [deviceToken],
        ),
        returnValue: _i7.Future<_i5.Credentials>.value(_FakeCredentials_9(
          this,
          Invocation.method(
            #listenToResolve,
            [deviceToken],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.Credentials>.value(_FakeCredentials_9(
          this,
          Invocation.method(
            #listenToResolve,
            [deviceToken],
          ),
        )),
      ) as _i7.Future<_i5.Credentials>);
}
